generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Order_Status{
  PLACED
  DISPATCHED
  RECEIVED
}
enum Transaction_Status{
  PAID
  NOT_PAID
}
enum Role{
  SELLER
  BUYER
}

enum ServiceType{
  PROJECT_HELP
  ASSIGNMENT_HELP
  BIKE_RENTAL
  TAXI_BOOKING
  RESTURANT
}

model University{
  university_id         String      @id                  @default(uuid()) 
  name                  String      @unique
  address               String
  zipcode               Int
  latitude              Float
  longitude             Float
  category              String
  description           String?
  universityLogo        String
  userCount             Int          @default(0)
  createdAt             DateTime     @default(now())

  
  
  services              Services[]
  products              Products[]
  users                 User[]
  admin                 Admin[]      @relation("admin")
  
  
}

model User{
  user_id               String        @id           @default(uuid())
  university_id         String?          
  userUniversity        University?    @relation(fields: [university_id ], references: [university_id],onDelete: SetNull)
  userUniversityName    String
  userName              String       
  userEmail             String?        
  userMobileNo          String       @unique
  hashedPassword        String   
  userAvtar             String?
  role                  Role         @default(BUYER)    
  isVerified            Boolean      @default(false)
  userCreatedAt         DateTime      @default(now())


  userPurchases         Purchases[]
  userCart              Cart[]
  userProducts          Products[]
  userServices          Services[] 
  userOrders            Orders[]
  buyerTransactions     Transactions[]  @relation(name: "buyer_transaction")  
  sellerTransactions    Transactions[]  @relation(name: "seller_transaction") 
  

}
model Admin{
  admin_id             String         @id           @default(uuid())
  adminName            String  
  adminEmail           String         @unique
  adminMobileNo        String         @unique
  adminAddress         String
  adminPassword        String
  adminAvatar          String?


  AllotedUniversities  University[] @relation("admin")     
}
model SuperAdmin{
  superAdmin_id        String         @id          @default(uuid())
  superAdminName       String         
  superAdminEmail      String         @unique
  superAdminPassword   String  
  superAdminMobileNo   String         @unique       
  superAdminAvatar     String
}
model Products{
  product_id            String         @id          @default(uuid())    
  user_id               String       
  university_id         String
  name                  String
  description           String?
  price                 Decimal
  category              String
  condition             String        //"new" or "used" usr slr will give 
  imageUrl              String
  createdAt             DateTime       @default(now())
  isApproved            Boolean        @default(false)

  user                  User           @relation(fields: [user_id],references: [user_id]) 
  university            University     @relation(fields: [university_id],references: [university_id])
  orders                Orders[]
  transaction           Transactions[]
  purchases             Purchases[]
  cart                  Cart[]
}
model Services{
  service_id            String         @id        @default(uuid())
  user_id               String        
  university_id         String
  name                  String
  description           String?
  price                 Decimal
  serviceType           ServiceType        //"asignment","project help", "bike rent" etc ....
  createdAt             DateTime       @default(now())  
             

  user                  User           @relation(fields: [user_id],references: [user_id])
  university            University     @relation(fields: [university_id],references: [university_id])

  bikeRentals           BikeRetal[]

}

model BikeRetal{
  id                   String     @id        @default(uuid())
  serviceId            String
  userId               String
  bikeRentalName       String
  bikeRentalDescription  String
  bikeRentalAddress    String
  rentPerHour          String
  available            Boolean     @default(true)
  idApproved           Boolean     @default(false)
  createdAt            DateTime    @default(now())
  rating               Float?      @default(0)
  bikeRentalBanner     String?
  

  service              Services    @relation(fields: [serviceId],references: [service_id])
  products             BikeRetalProducts[]
  reviews              BikeRentalReviews[]
}
model BikeRetalProducts{
  id                    String     @id       @default(uuid()) 
  rentalServiceId       String
  bikeName              String
  bikeDetails           String
  bikeNumberPlate       String
  anyNoteForRiders      String?
  pricePerHour          Float
  bikeImage             String
  bikeImage2            String?
  bikeImage3            String?
  bikeImage4            String 
  likes                 Int          @default(0)      
  isAvailble            Boolean      @default(true)

  bikeRentalService     BikeRetal    @relation(fields: [rentalServiceId],references: [id])
}

model BikeRentalReviews{
  reviewId             String        @id      @default(uuid())
  rentalServiceId      String
  review               String
  likes                Int           @default(0)
  disLikes             Int           @default(0) 

  bikeRentalService    BikeRetal     @relation(fields: [rentalServiceId],references: [id])
}

model Resturant{
  resturantId           String      @id          @default(uuid())
  resturantsName        String
  resturantDetails      String
  resturantAddress      String
  userId                String
  ServiceTime           DateTime
  homeDeliveryService   Boolean      @default(true)
  isOpen                Boolean      @default(true)
  menu                  String?
  menuImage             String?  
  resturantBanner       String?   
  rating                Float?        @default(0)        

  resturantProducts     ResturantProducts[]
  resturantReviews      ResturantReviews[]

}

model ResturantProducts{
  productId             String      @id            @default(uuid())
  resturantId           String
  foodName              String
  foodDescription       String
  likes                 Int          @default(0)
  foodPrice             Float
  isAvailable           Boolean      @default(true)
  foodImage             String
  foodImage2            String?
  foodImage3            String?

  resturant             Resturant     @relation(fields: [resturantId],references: [resturantId])
}

model ResturantReviews{
  reviewId             String        @id          @default(uuid())
  resturantId          String
  review               String
  likes                Int           @default(0)
  dislikes             Int            @default(0)

  resturant            Resturant      @relation(fields: [resturantId],references: [resturantId])
}


model Purchases{
  purchase_id           String         @id        @default(uuid())
  user_id               String
  product_id            String
  amount                Decimal
  status                Order_Status   @default(PLACED)
  purchaseDate          DateTime       @default(now())


  user                  User           @relation(fields: [user_id],references: [user_id])
  product               Products       @relation(fields: [product_id],references: [product_id])
  

}

model Cart{
  id                    String        @id       @default(uuid())
  user_id               String
  product_id            String
  quantity              Int            @default(1)    
  createdAt             DateTime       @default(now())

  user                  User           @relation(fields: [user_id],references: [user_id])
  product               Products      @relation(fields: [product_id],references: [product_id])
}

model Orders{
  order_id              String         @id                 @default(uuid())
  status                Order_Status   @default(PLACED)
  user_id               String
  product_id            String
  quantity              Int
  totalPrice            Decimal
  paymentStatus         Transaction_Status    
  createdAt             DateTime       @default(now())  
  deliveryDate          DateTime?

  user                  User          @relation(fields: [user_id],references: [user_id])
  product               Products      @relation(fields: [product_id],references: [product_id])
}

model Transactions{
  transaction_id        String       @id     @default(uuid())
  product_id            String
  buyer_id              String
  seller_id             String
  amount                Decimal
  paymentMethod         String    // like-> upi, credit card, Cash
  status                Transaction_Status
  transactionDate       DateTime              @default(now())


  buyer                 User   @relation(fields: [buyer_id], references: [user_id], name: "buyer_transaction")  
  seller                User   @relation(fields: [seller_id], references: [user_id], name: "seller_transaction")
  product               Products     @relation(fields: [product_id],references: [product_id])
}